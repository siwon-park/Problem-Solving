# 강의실 배정(11000번)
##############################################################################
    # 문제: https://www.acmicpc.net/problem/11000
    # 우선 순위 큐, 정렬, 그리디
    # 어떻게 풀어야하나 좀 많이 헤맸다. 그래서 질문 게시판을 참고해서 힌트를 얻어서 풀 수 있었다.
    # 강의실의 수를 출력하는 문제임을 유의해야한다. 처음에 강의할 수 있는 강의의 개수를 출력하고 있었다.
    # 리스트는 강의 시작 시간 순으로 정렬하고, 우선 순위 큐는 강의가 끝나는 시간을 기준으로 정렬하는게 핵심이다.
    # 그렇게 해야 현재 상태에서 강의가 가장 빨리 시작하는 시간과 강의가 가장 빨리 끝나는 시간을 비교할 수 있다.
##############################################################################
import sys, heapq
input = sys.stdin.readline

pq = []
N = int(input())
lst = []
for _ in range(N):
    S, T = map(int, input().split())
    lst.append((S, T))

lst.sort() # 강의가 빨리 끝나는 순으로 정렬
heapq.heappush(pq, lst[0][1]) # (가장 빨리 시작하는)강의의 끝나는 시간을 우선 순위 큐에 삽입

cnt = 1 # 초깃값은 1
for i in range(1, N):
    end = heapq.heappop(pq)
    if lst[i][0] < end: # 현재 강의 시작 시간이 가장 빨리 끝나는 강의 종료 시간보다 작으면
        cnt += 1 # 다른 강의실에서 강의를 해야하므로 cnt += 1
        heapq.heappush(pq, end) # 우선 순위 큐에 pop했던 요소를 그대로 넣는다.
        heapq.heappush(pq, lst[i][1]) # 현재 강의의 끝나는 시간을 우선순위 큐에 삽입한다.
    else:
        heapq.heappush(pq, lst[i][1])
print(cnt)
