# 입국심사(3079번)
##############################################################################
    # 문제: https://www.acmicpc.net/problem/3079
    # 이분 탐색, 파라메트릭 서치
    # 예전에 프로그래머스에서 비슷한 유형을 풀었던 기억은 났지만 어떻게 풀었는지는 생각이 안 났다.
    # 이분탐색 문제였던 것 같아서 이분탐색으로 접근하여 풀려고 하는데 최소 최적 시간을 어떻게 구해야하는지 조금 고민했다.
    # 그래서 문제의 예시 2개가 어떻게 저렇게 답이 나오는지 직접 끄적여보다가
    # 입국심사 통과 총 인원수가 최적 총 종료시간을 각 입국 심사대의 일처리 시간으로 나눈 몫의 합이라는 것을 알게됐다.
    # 그런데 첫 제출이 5%에서 시간초과 판정을 받아서 어디에 비효율이 있나 살펴보면서 코드를 수정하려는데
    # 엄청나게 큰 실수를 저질렀다는 것을 눈치챘다.
    # 이분탐색의 기준이 되는 s와 e을 갱신함에 있어 mid+-1으로 갱신시켜줘야 했으나, 그냥 +-1로 갱신시켜주고 있었다.
    # 이러니 당연히 시간초과 판정을 받을 수밖에 없었던 것이다. 해당 부분만 수정하니 잘 해결할 수 있었다.
##############################################################################
import sys
input = sys.stdin.readline

N, M = map(int, input().split())
arr = [int(input().rstrip()) for _ in range(N)]
arr.sort()

def binary_search(s, e):
    opt_t = 0
    while s <= e:
        mid = (s + e) // 2
        cnt = 0 # 입국심사 통과 인원 수
        for num in arr:
            cnt += mid // num # (목표 총 종료시간 // 걸리는 시간)만큼 인원에 +
            if cnt >= M:
                opt_t = mid # mid를 최소 최적 종료시간으로 갱신하고 e를 줄여서 더 작은 시간에 가능한지 탐색함
                e = mid - 1 # 처음에 e -= 1로 갱신시켜주는 실수를 범함  
                break
        if cnt < M:
            s = mid + 1 # 처음에 s += 1로 갱신시켜주는 실수를 범함
    return opt_t

print(binary_search(0, arr[0] * M))
