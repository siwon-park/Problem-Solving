#오르막 수(11057번)
##################################################
    # 문제: https://www.acmicpc.net/problem/11057
    # 다이나믹 프로그래밍
    # dp[N][k]는 N자리 수인데 끝자리가 k로 끝난 경우의 수를 의미
    # 따라서 일단 dp[N][0]=1이다. 마지막 자리의 수가 0으로 끝나려면 그 전 수가 0으로 끝난 경우 밖에 없으므로,
    # 점화식을 세우면 dp[N][k]=dp[N][0]+dp[N][1]+dp[N][2]+dp[N][...]+dp[N][k-1]가 나온다.
    # 이 점화식을 간단하게 표현하면 dp[N][k]=dp[N-1][k]+dp[N][k-1]이다.
    # 왜냐하면 일단 dp[N-1][k]는 마지막이 k로 끝났으니 그대로 k를 붙이는 경우를 계산하는 셈이고
    # dp[N][k-1]은 N자리 수 중 마지막이 k-1로 끝난 경우의 수들인데, 마지막이 k-1로 끝나려면 그 N-1자리 수 중 끝자리가 k-1 '이하'로 끝난 경우의 합이고, 거기에 k를 붙인다고 가정하면
    # 해당 점화식과 같이 표현되는 셈이다.
##################################################
import sys
input=sys.stdin.readline
N=int(input())
dp=[[0]*11 for i in range(N+1)]
dp[1]=[1,1,1,1,1,1,1,1,1,1,10]
for i in range(2,N+1):
    dp[i][0]=1
    for j in range(1,10):
        dp[i][j]=(dp[i][j-1]+dp[i-1][j])%10007
    dp[i][10]=sum(dp[i][:10])%10007
print(dp[N][10])
